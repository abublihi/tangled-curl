from random import randint
from pycurl import Curl
import sys, ast, getopt, types


index = {0: [0, 364], 1: [364, 728], 2: [728, 363], 3: [363, 727], 4: [727, 362], 5: [362, 726], 6: [726, 361], 7: [361, 725], 8: [725, 360], 9: [360, 724], 10: [724, 359], 11: [359, 723], 12: [723, 358], 13: [358, 722], 14: [722, 357], 15: [357, 721], 16: [721, 356], 17: [356, 720], 18: [720, 355], 19: [355, 719], 20: [719, 354], 21: [354, 718], 22: [718, 353], 23: [353, 717], 24: [717, 352], 25: [352, 716], 26: [716, 351], 27: [351, 715], 28: [715, 350], 29: [350, 714], 30: [714, 349], 31: [349, 713], 32: [713, 348], 33: [348, 712], 34: [712, 347], 35: [347, 711], 36: [711, 346], 37: [346, 710], 38: [710, 345], 39: [345, 709], 40: [709, 344], 41: [344, 708], 42: [708, 343], 43: [343, 707], 44: [707, 342], 45: [342, 706], 46: [706, 341], 47: [341, 705], 48: [705, 340], 49: [340, 704], 50: [704, 339], 51: [339, 703], 52: [703, 338], 53: [338, 702], 54: [702, 337], 55: [337, 701], 56: [701, 336], 57: [336, 700], 58: [700, 335], 59: [335, 699], 60: [699, 334], 61: [334, 698], 62: [698, 333], 63: [333, 697], 64: [697, 332], 65: [332, 696], 66: [696, 331], 67: [331, 695], 68: [695, 330], 69: [330, 694], 70: [694, 329], 71: [329, 693], 72: [693, 328], 73: [328, 692], 74: [692, 327], 75: [327, 691], 76: [691, 326], 77: [326, 690], 78: [690, 325], 79: [325, 689], 80: [689, 324], 81: [324, 688], 82: [688, 323], 83: [323, 687], 84: [687, 322], 85: [322, 686], 86: [686, 321], 87: [321, 685], 88: [685, 320], 89: [320, 684], 90: [684, 319], 91: [319, 683], 92: [683, 318], 93: [318, 682], 94: [682, 317], 95: [317, 681], 96: [681, 316], 97: [316, 680], 98: [680, 315], 99: [315, 679], 100: [679, 314], 101: [314, 678], 102: [678, 313], 103: [313, 677], 104: [677, 312], 105: [312, 676], 106: [676, 311], 107: [311, 675], 108: [675, 310], 109: [310, 674], 110: [674, 309], 111: [309, 673], 112: [673, 308], 113: [308, 672], 114: [672, 307], 115: [307, 671], 116: [671, 306], 117: [306, 670], 118: [670, 305], 119: [305, 669], 120: [669, 304], 121: [304, 668], 122: [668, 303], 123: [303, 667], 124: [667, 302], 125: [302, 666], 126: [666, 301], 127: [301, 665], 128: [665, 300], 129: [300, 664], 130: [664, 299], 131: [299, 663], 132: [663, 298], 133: [298, 662], 134: [662, 297], 135: [297, 661], 136: [661, 296], 137: [296, 660], 138: [660, 295], 139: [295, 659], 140: [659, 294], 141: [294, 658], 142: [658, 293], 143: [293, 657], 144: [657, 292], 145: [292, 656], 146: [656, 291], 147: [291, 655], 148: [655, 290], 149: [290, 654], 150: [654, 289], 151: [289, 653], 152: [653, 288], 153: [288, 652], 154: [652, 287], 155: [287, 651], 156: [651, 286], 157: [286, 650], 158: [650, 285], 159: [285, 649], 160: [649, 284], 161: [284, 648], 162: [648, 283], 163: [283, 647], 164: [647, 282], 165: [282, 646], 166: [646, 281], 167: [281, 645], 168: [645, 280], 169: [280, 644], 170: [644, 279], 171: [279, 643], 172: [643, 278], 173: [278, 642], 174: [642, 277], 175: [277, 641], 176: [641, 276], 177: [276, 640], 178: [640, 275], 179: [275, 639], 180: [639, 274], 181: [274, 638], 182: [638, 273], 183: [273, 637], 184: [637, 272], 185: [272, 636], 186: [636, 271], 187: [271, 635], 188: [635, 270], 189: [270, 634], 190: [634, 269], 191: [269, 633], 192: [633, 268], 193: [268, 632], 194: [632, 267], 195: [267, 631], 196: [631, 266], 197: [266, 630], 198: [630, 265], 199: [265, 629], 200: [629, 264], 201: [264, 628], 202: [628, 263], 203: [263, 627], 204: [627, 262], 205: [262, 626], 206: [626, 261], 207: [261, 625], 208: [625, 260], 209: [260, 624], 210: [624, 259], 211: [259, 623], 212: [623, 258], 213: [258, 622], 214: [622, 257], 215: [257, 621], 216: [621, 256], 217: [256, 620], 218: [620, 255], 219: [255, 619], 220: [619, 254], 221: [254, 618], 222: [618, 253], 223: [253, 617], 224: [617, 252], 225: [252, 616], 226: [616, 251], 227: [251, 615], 228: [615, 250], 229: [250, 614], 230: [614, 249], 231: [249, 613], 232: [613, 248], 233: [248, 612], 234: [612, 247], 235: [247, 611], 236: [611, 246], 237: [246, 610], 238: [610, 245], 239: [245, 609], 240: [609, 244], 241: [244, 608], 242: [608, 243], 243: [243, 607], 244: [607, 242], 245: [242, 606], 246: [606, 241], 247: [241, 605], 248: [605, 240], 249: [240, 604], 250: [604, 239], 251: [239, 603], 252: [603, 238], 253: [238, 602], 254: [602, 237], 255: [237, 601], 256: [601, 236], 257: [236, 600], 258: [600, 235], 259: [235, 599], 260: [599, 234], 261: [234, 598], 262: [598, 233], 263: [233, 597], 264: [597, 232], 265: [232, 596], 266: [596, 231], 267: [231, 595], 268: [595, 230], 269: [230, 594], 270: [594, 229], 271: [229, 593], 272: [593, 228], 273: [228, 592], 274: [592, 227], 275: [227, 591], 276: [591, 226], 277: [226, 590], 278: [590, 225], 279: [225, 589], 280: [589, 224], 281: [224, 588], 282: [588, 223], 283: [223, 587], 284: [587, 222], 285: [222, 586], 286: [586, 221], 287: [221, 585], 288: [585, 220], 289: [220, 584], 290: [584, 219], 291: [219, 583], 292: [583, 218], 293: [218, 582], 294: [582, 217], 295: [217, 581], 296: [581, 216], 297: [216, 580], 298: [580, 215], 299: [215, 579], 300: [579, 214], 301: [214, 578], 302: [578, 213], 303: [213, 577], 304: [577, 212], 305: [212, 576], 306: [576, 211], 307: [211, 575], 308: [575, 210], 309: [210, 574], 310: [574, 209], 311: [209, 573], 312: [573, 208], 313: [208, 572], 314: [572, 207], 315: [207, 571], 316: [571, 206], 317: [206, 570], 318: [570, 205], 319: [205, 569], 320: [569, 204], 321: [204, 568], 322: [568, 203], 323: [203, 567], 324: [567, 202], 325: [202, 566], 326: [566, 201], 327: [201, 565], 328: [565, 200], 329: [200, 564], 330: [564, 199], 331: [199, 563], 332: [563, 198], 333: [198, 562], 334: [562, 197], 335: [197, 561], 336: [561, 196], 337: [196, 560], 338: [560, 195], 339: [195, 559], 340: [559, 194], 341: [194, 558], 342: [558, 193], 343: [193, 557], 344: [557, 192], 345: [192, 556], 346: [556, 191], 347: [191, 555], 348: [555, 190], 349: [190, 554], 350: [554, 189], 351: [189, 553], 352: [553, 188], 353: [188, 552], 354: [552, 187], 355: [187, 551], 356: [551, 186], 357: [186, 550], 358: [550, 185], 359: [185, 549], 360: [549, 184], 361: [184, 548], 362: [548, 183], 363: [183, 547], 364: [547, 182], 365: [182, 546], 366: [546, 181], 367: [181, 545], 368: [545, 180], 369: [180, 544], 370: [544, 179], 371: [179, 543], 372: [543, 178], 373: [178, 542], 374: [542, 177], 375: [177, 541], 376: [541, 176], 377: [176, 540], 378: [540, 175], 379: [175, 539], 380: [539, 174], 381: [174, 538], 382: [538, 173], 383: [173, 537], 384: [537, 172], 385: [172, 536], 386: [536, 171], 387: [171, 535], 388: [535, 170], 389: [170, 534], 390: [534, 169], 391: [169, 533], 392: [533, 168], 393: [168, 532], 394: [532, 167], 395: [167, 531], 396: [531, 166], 397: [166, 530], 398: [530, 165], 399: [165, 529], 400: [529, 164], 401: [164, 528], 402: [528, 163], 403: [163, 527], 404: [527, 162], 405: [162, 526], 406: [526, 161], 407: [161, 525], 408: [525, 160], 409: [160, 524], 410: [524, 159], 411: [159, 523], 412: [523, 158], 413: [158, 522], 414: [522, 157], 415: [157, 521], 416: [521, 156], 417: [156, 520], 418: [520, 155], 419: [155, 519], 420: [519, 154], 421: [154, 518], 422: [518, 153], 423: [153, 517], 424: [517, 152], 425: [152, 516], 426: [516, 151], 427: [151, 515], 428: [515, 150], 429: [150, 514], 430: [514, 149], 431: [149, 513], 432: [513, 148], 433: [148, 512], 434: [512, 147], 435: [147, 511], 436: [511, 146], 437: [146, 510], 438: [510, 145], 439: [145, 509], 440: [509, 144], 441: [144, 508], 442: [508, 143], 443: [143, 507], 444: [507, 142], 445: [142, 506], 446: [506, 141], 447: [141, 505], 448: [505, 140], 449: [140, 504], 450: [504, 139], 451: [139, 503], 452: [503, 138], 453: [138, 502], 454: [502, 137], 455: [137, 501], 456: [501, 136], 457: [136, 500], 458: [500, 135], 459: [135, 499], 460: [499, 134], 461: [134, 498], 462: [498, 133], 463: [133, 497], 464: [497, 132], 465: [132, 496], 466: [496, 131], 467: [131, 495], 468: [495, 130], 469: [130, 494], 470: [494, 129], 471: [129, 493], 472: [493, 128], 473: [128, 492], 474: [492, 127], 475: [127, 491], 476: [491, 126], 477: [126, 490], 478: [490, 125], 479: [125, 489], 480: [489, 124], 481: [124, 488], 482: [488, 123], 483: [123, 487], 484: [487, 122], 485: [122, 486], 486: [486, 121], 487: [121, 485], 488: [485, 120], 489: [120, 484], 490: [484, 119], 491: [119, 483], 492: [483, 118], 493: [118, 482], 494: [482, 117], 495: [117, 481], 496: [481, 116], 497: [116, 480], 498: [480, 115], 499: [115, 479], 500: [479, 114], 501: [114, 478], 502: [478, 113], 503: [113, 477], 504: [477, 112], 505: [112, 476], 506: [476, 111], 507: [111, 475], 508: [475, 110], 509: [110, 474], 510: [474, 109], 511: [109, 473], 512: [473, 108], 513: [108, 472], 514: [472, 107], 515: [107, 471], 516: [471, 106], 517: [106, 470], 518: [470, 105], 519: [105, 469], 520: [469, 104], 521: [104, 468], 522: [468, 103], 523: [103, 467], 524: [467, 102], 525: [102, 466], 526: [466, 101], 527: [101, 465], 528: [465, 100], 529: [100, 464], 530: [464, 99], 531: [99, 463], 532: [463, 98], 533: [98, 462], 534: [462, 97], 535: [97, 461], 536: [461, 96], 537: [96, 460], 538: [460, 95], 539: [95, 459], 540: [459, 94], 541: [94, 458], 542: [458, 93], 543: [93, 457], 544: [457, 92], 545: [92, 456], 546: [456, 91], 547: [91, 455], 548: [455, 90], 549: [90, 454], 550: [454, 89], 551: [89, 453], 552: [453, 88], 553: [88, 452], 554: [452, 87], 555: [87, 451], 556: [451, 86], 557: [86, 450], 558: [450, 85], 559: [85, 449], 560: [449, 84], 561: [84, 448], 562: [448, 83], 563: [83, 447], 564: [447, 82], 565: [82, 446], 566: [446, 81], 567: [81, 445], 568: [445, 80], 569: [80, 444], 570: [444, 79], 571: [79, 443], 572: [443, 78], 573: [78, 442], 574: [442, 77], 575: [77, 441], 576: [441, 76], 577: [76, 440], 578: [440, 75], 579: [75, 439], 580: [439, 74], 581: [74, 438], 582: [438, 73], 583: [73, 437], 584: [437, 72], 585: [72, 436], 586: [436, 71], 587: [71, 435], 588: [435, 70], 589: [70, 434], 590: [434, 69], 591: [69, 433], 592: [433, 68], 593: [68, 432], 594: [432, 67], 595: [67, 431], 596: [431, 66], 597: [66, 430], 598: [430, 65], 599: [65, 429], 600: [429, 64], 601: [64, 428], 602: [428, 63], 603: [63, 427], 604: [427, 62], 605: [62, 426], 606: [426, 61], 607: [61, 425], 608: [425, 60], 609: [60, 424], 610: [424, 59], 611: [59, 423], 612: [423, 58], 613: [58, 422], 614: [422, 57], 615: [57, 421], 616: [421, 56], 617: [56, 420], 618: [420, 55], 619: [55, 419], 620: [419, 54], 621: [54, 418], 622: [418, 53], 623: [53, 417], 624: [417, 52], 625: [52, 416], 626: [416, 51], 627: [51, 415], 628: [415, 50], 629: [50, 414], 630: [414, 49], 631: [49, 413], 632: [413, 48], 633: [48, 412], 634: [412, 47], 635: [47, 411], 636: [411, 46], 637: [46, 410], 638: [410, 45], 639: [45, 409], 640: [409, 44], 641: [44, 408], 642: [408, 43], 643: [43, 407], 644: [407, 42], 645: [42, 406], 646: [406, 41], 647: [41, 405], 648: [405, 40], 649: [40, 404], 650: [404, 39], 651: [39, 403], 652: [403, 38], 653: [38, 402], 654: [402, 37], 655: [37, 401], 656: [401, 36], 657: [36, 400], 658: [400, 35], 659: [35, 399], 660: [399, 34], 661: [34, 398], 662: [398, 33], 663: [33, 397], 664: [397, 32], 665: [32, 396], 666: [396, 31], 667: [31, 395], 668: [395, 30], 669: [30, 394], 670: [394, 29], 671: [29, 393], 672: [393, 28], 673: [28, 392], 674: [392, 27], 675: [27, 391], 676: [391, 26], 677: [26, 390], 678: [390, 25], 679: [25, 389], 680: [389, 24], 681: [24, 388], 682: [388, 23], 683: [23, 387], 684: [387, 22], 685: [22, 386], 686: [386, 21], 687: [21, 385], 688: [385, 20], 689: [20, 384], 690: [384, 19], 691: [19, 383], 692: [383, 18], 693: [18, 382], 694: [382, 17], 695: [17, 381], 696: [381, 16], 697: [16, 380], 698: [380, 15], 699: [15, 379], 700: [379, 14], 701: [14, 378], 702: [378, 13], 703: [13, 377], 704: [377, 12], 705: [12, 376], 706: [376, 11], 707: [11, 375], 708: [375, 10], 709: [10, 374], 710: [374, 9], 711: [9, 373], 712: [373, 8], 713: [8, 372], 714: [372, 7], 715: [7, 371], 716: [371, 6], 717: [6, 370], 718: [370, 5], 719: [5, 369], 720: [369, 4], 721: [4, 368], 722: [368, 3], 723: [3, 367], 724: [367, 2], 725: [2, 366], 726: [366, 1], 727: [1, 365], 728: [365, 0]}

#0 impacts 0 with 364
larr = {0: (0, 364), 1: (727, 365), 2: (725, 366), 3: (723, 367), 4: (721, 368), 5: (719, 369), 6: (717, 370), 7: (715, 371), 8: (713, 372), 9: (711, 373), 10: (709, 374), 11: (707, 375), 12: (705, 376), 13: (703, 377), 14: (701, 378), 15: (699, 379), 16: (697, 380), 17: (695, 381), 18: (693, 382), 19: (691, 383), 20: (689, 384), 21: (687, 385), 22: (685, 386), 23: (683, 387), 24: (681, 388), 25: (679, 389), 26: (677, 390), 27: (675, 391), 28: (673, 392), 29: (671, 393), 30: (669, 394), 31: (667, 395), 32: (665, 396), 33: (663, 397), 34: (661, 398), 35: (659, 399), 36: (657, 400), 37: (655, 401), 38: (653, 402), 39: (651, 403), 40: (649, 404), 41: (647, 405), 42: (645, 406), 43: (643, 407), 44: (641, 408), 45: (639, 409), 46: (637, 410), 47: (635, 411), 48: (633, 412), 49: (631, 413), 50: (629, 414), 51: (627, 415), 52: (625, 416), 53: (623, 417), 54: (621, 418), 55: (619, 419), 56: (617, 420), 57: (615, 421), 58: (613, 422), 59: (611, 423), 60: (609, 424), 61: (607, 425), 62: (605, 426), 63: (603, 427), 64: (601, 428), 65: (599, 429), 66: (597, 430), 67: (595, 431), 68: (593, 432), 69: (591, 433), 70: (589, 434), 71: (587, 435), 72: (585, 436), 73: (583, 437), 74: (581, 438), 75: (579, 439), 76: (577, 440), 77: (575, 441), 78: (573, 442), 79: (571, 443), 80: (569, 444), 81: (567, 445), 82: (565, 446), 83: (563, 447), 84: (561, 448), 85: (559, 449), 86: (557, 450), 87: (555, 451), 88: (553, 452), 89: (551, 453), 90: (549, 454), 91: (547, 455), 92: (545, 456), 93: (543, 457), 94: (541, 458), 95: (539, 459), 96: (537, 460), 97: (535, 461), 98: (533, 462), 99: (531, 463), 100: (529, 464), 101: (527, 465), 102: (525, 466), 103: (523, 467), 104: (521, 468), 105: (519, 469), 106: (517, 470), 107: (515, 471), 108: (513, 472), 109: (511, 473), 110: (509, 474), 111: (507, 475), 112: (505, 476), 113: (503, 477), 114: (501, 478), 115: (499, 479), 116: (497, 480), 117: (495, 481), 118: (493, 482), 119: (491, 483), 120: (489, 484), 121: (487, 485), 122: (485, 486), 123: (483, 487), 124: (481, 488), 125: (479, 489), 126: (477, 490), 127: (475, 491), 128: (473, 492), 129: (471, 493), 130: (469, 494), 131: (467, 495), 132: (465, 496), 133: (463, 497), 134: (461, 498), 135: (459, 499), 136: (457, 500), 137: (455, 501), 138: (453, 502), 139: (451, 503), 140: (449, 504), 141: (447, 505), 142: (445, 506), 143: (443, 507), 144: (441, 508), 145: (439, 509), 146: (437, 510), 147: (435, 511), 148: (433, 512), 149: (431, 513), 150: (429, 514), 151: (427, 515), 152: (425, 516), 153: (423, 517), 154: (421, 518), 155: (419, 519), 156: (417, 520), 157: (415, 521), 158: (413, 522), 159: (411, 523), 160: (409, 524), 161: (407, 525), 162: (405, 526), 163: (403, 527), 164: (401, 528), 165: (399, 529), 166: (397, 530), 167: (395, 531), 168: (393, 532), 169: (391, 533), 170: (389, 534), 171: (387, 535), 172: (385, 536), 173: (383, 537), 174: (381, 538), 175: (379, 539), 176: (377, 540), 177: (375, 541), 178: (373, 542), 179: (371, 543), 180: (369, 544), 181: (367, 545), 182: (365, 546), 183: (363, 547), 184: (361, 548), 185: (359, 549), 186: (357, 550), 187: (355, 551), 188: (353, 552), 189: (351, 553), 190: (349, 554), 191: (347, 555), 192: (345, 556), 193: (343, 557), 194: (341, 558), 195: (339, 559), 196: (337, 560), 197: (335, 561), 198: (333, 562), 199: (331, 563), 200: (329, 564), 201: (327, 565), 202: (325, 566), 203: (323, 567), 204: (321, 568), 205: (319, 569), 206: (317, 570), 207: (315, 571), 208: (313, 572), 209: (311, 573), 210: (309, 574), 211: (307, 575), 212: (305, 576), 213: (303, 577), 214: (301, 578), 215: (299, 579), 216: (297, 580), 217: (295, 581), 218: (293, 582), 219: (291, 583), 220: (289, 584), 221: (287, 585), 222: (285, 586), 223: (283, 587), 224: (281, 588), 225: (279, 589), 226: (277, 590), 227: (275, 591), 228: (273, 592), 229: (271, 593), 230: (269, 594), 231: (267, 595), 232: (265, 596), 233: (263, 597), 234: (261, 598), 235: (259, 599), 236: (257, 600), 237: (255, 601), 238: (253, 602), 239: (251, 603), 240: (249, 604), 241: (247, 605), 242: (245, 606), 243: (243, 607), 244: (241, 608), 245: (239, 609), 246: (237, 610), 247: (235, 611), 248: (233, 612), 249: (231, 613), 250: (229, 614), 251: (227, 615), 252: (225, 616), 253: (223, 617), 254: (221, 618), 255: (219, 619), 256: (217, 620), 257: (215, 621), 258: (213, 622), 259: (211, 623), 260: (209, 624), 261: (207, 625), 262: (205, 626), 263: (203, 627), 264: (201, 628), 265: (199, 629), 266: (197, 630), 267: (195, 631), 268: (193, 632), 269: (191, 633), 270: (189, 634), 271: (187, 635), 272: (185, 636), 273: (183, 637), 274: (181, 638), 275: (179, 639), 276: (177, 640), 277: (175, 641), 278: (173, 642), 279: (171, 643), 280: (169, 644), 281: (167, 645), 282: (165, 646), 283: (163, 647), 284: (161, 648), 285: (159, 649), 286: (157, 650), 287: (155, 651), 288: (153, 652), 289: (151, 653), 290: (149, 654), 291: (147, 655), 292: (145, 656), 293: (143, 657), 294: (141, 658), 295: (139, 659), 296: (137, 660), 297: (135, 661), 298: (133, 662), 299: (131, 663), 300: (129, 664), 301: (127, 665), 302: (125, 666), 303: (123, 667), 304: (121, 668), 305: (119, 669), 306: (117, 670), 307: (115, 671), 308: (113, 672), 309: (111, 673), 310: (109, 674), 311: (107, 675), 312: (105, 676), 313: (103, 677), 314: (101, 678), 315: (99, 679), 316: (97, 680), 317: (95, 681), 318: (93, 682), 319: (91, 683), 320: (89, 684), 321: (87, 685), 322: (85, 686), 323: (83, 687), 324: (81, 688), 325: (79, 689), 326: (77, 690), 327: (75, 691), 328: (73, 692), 329: (71, 693), 330: (69, 694), 331: (67, 695), 332: (65, 696), 333: (63, 697), 334: (61, 698), 335: (59, 699), 336: (57, 700), 337: (55, 701), 338: (53, 702), 339: (51, 703), 340: (49, 704), 341: (47, 705), 342: (45, 706), 343: (43, 707), 344: (41, 708), 345: (39, 709), 346: (37, 710), 347: (35, 711), 348: (33, 712), 349: (31, 713), 350: (29, 714), 351: (27, 715), 352: (25, 716), 353: (23, 717), 354: (21, 718), 355: (19, 719), 356: (17, 720), 357: (15, 721), 358: (13, 722), 359: (11, 723), 360: (9, 724), 361: (7, 725), 362: (5, 726), 363: (3, 727), 364: (1, 728), 365: (728, 0), 366: (726, 1), 367: (724, 2), 368: (722, 3), 369: (720, 4), 370: (718, 5), 371: (716, 6), 372: (714, 7), 373: (712, 8), 374: (710, 9), 375: (708, 10), 376: (706, 11), 377: (704, 12), 378: (702, 13), 379: (700, 14), 380: (698, 15), 381: (696, 16), 382: (694, 17), 383: (692, 18), 384: (690, 19), 385: (688, 20), 386: (686, 21), 387: (684, 22), 388: (682, 23), 389: (680, 24), 390: (678, 25), 391: (676, 26), 392: (674, 27), 393: (672, 28), 394: (670, 29), 395: (668, 30), 396: (666, 31), 397: (664, 32), 398: (662, 33), 399: (660, 34), 400: (658, 35), 401: (656, 36), 402: (654, 37), 403: (652, 38), 404: (650, 39), 405: (648, 40), 406: (646, 41), 407: (644, 42), 408: (642, 43), 409: (640, 44), 410: (638, 45), 411: (636, 46), 412: (634, 47), 413: (632, 48), 414: (630, 49), 415: (628, 50), 416: (626, 51), 417: (624, 52), 418: (622, 53), 419: (620, 54), 420: (618, 55), 421: (616, 56), 422: (614, 57), 423: (612, 58), 424: (610, 59), 425: (608, 60), 426: (606, 61), 427: (604, 62), 428: (602, 63), 429: (600, 64), 430: (598, 65), 431: (596, 66), 432: (594, 67), 433: (592, 68), 434: (590, 69), 435: (588, 70), 436: (586, 71), 437: (584, 72), 438: (582, 73), 439: (580, 74), 440: (578, 75), 441: (576, 76), 442: (574, 77), 443: (572, 78), 444: (570, 79), 445: (568, 80), 446: (566, 81), 447: (564, 82), 448: (562, 83), 449: (560, 84), 450: (558, 85), 451: (556, 86), 452: (554, 87), 453: (552, 88), 454: (550, 89), 455: (548, 90), 456: (546, 91), 457: (544, 92), 458: (542, 93), 459: (540, 94), 460: (538, 95), 461: (536, 96), 462: (534, 97), 463: (532, 98), 464: (530, 99), 465: (528, 100), 466: (526, 101), 467: (524, 102), 468: (522, 103), 469: (520, 104), 470: (518, 105), 471: (516, 106), 472: (514, 107), 473: (512, 108), 474: (510, 109), 475: (508, 110), 476: (506, 111), 477: (504, 112), 478: (502, 113), 479: (500, 114), 480: (498, 115), 481: (496, 116), 482: (494, 117), 483: (492, 118), 484: (490, 119), 485: (488, 120), 486: (486, 121), 487: (484, 122), 488: (482, 123), 489: (480, 124), 490: (478, 125), 491: (476, 126), 492: (474, 127), 493: (472, 128), 494: (470, 129), 495: (468, 130), 496: (466, 131), 497: (464, 132), 498: (462, 133), 499: (460, 134), 500: (458, 135), 501: (456, 136), 502: (454, 137), 503: (452, 138), 504: (450, 139), 505: (448, 140), 506: (446, 141), 507: (444, 142), 508: (442, 143), 509: (440, 144), 510: (438, 145), 511: (436, 146), 512: (434, 147), 513: (432, 148), 514: (430, 149), 515: (428, 150), 516: (426, 151), 517: (424, 152), 518: (422, 153), 519: (420, 154), 520: (418, 155), 521: (416, 156), 522: (414, 157), 523: (412, 158), 524: (410, 159), 525: (408, 160), 526: (406, 161), 527: (404, 162), 528: (402, 163), 529: (400, 164), 530: (398, 165), 531: (396, 166), 532: (394, 167), 533: (392, 168), 534: (390, 169), 535: (388, 170), 536: (386, 171), 537: (384, 172), 538: (382, 173), 539: (380, 174), 540: (378, 175), 541: (376, 176), 542: (374, 177), 543: (372, 178), 544: (370, 179), 545: (368, 180), 546: (366, 181), 547: (364, 182), 548: (362, 183), 549: (360, 184), 550: (358, 185), 551: (356, 186), 552: (354, 187), 553: (352, 188), 554: (350, 189), 555: (348, 190), 556: (346, 191), 557: (344, 192), 558: (342, 193), 559: (340, 194), 560: (338, 195), 561: (336, 196), 562: (334, 197), 563: (332, 198), 564: (330, 199), 565: (328, 200), 566: (326, 201), 567: (324, 202), 568: (322, 203), 569: (320, 204), 570: (318, 205), 571: (316, 206), 572: (314, 207), 573: (312, 208), 574: (310, 209), 575: (308, 210), 576: (306, 211), 577: (304, 212), 578: (302, 213), 579: (300, 214), 580: (298, 215), 581: (296, 216), 582: (294, 217), 583: (292, 218), 584: (290, 219), 585: (288, 220), 586: (286, 221), 587: (284, 222), 588: (282, 223), 589: (280, 224), 590: (278, 225), 591: (276, 226), 592: (274, 227), 593: (272, 228), 594: (270, 229), 595: (268, 230), 596: (266, 231), 597: (264, 232), 598: (262, 233), 599: (260, 234), 600: (258, 235), 601: (256, 236), 602: (254, 237), 603: (252, 238), 604: (250, 239), 605: (248, 240), 606: (246, 241), 607: (244, 242), 608: (242, 243), 609: (240, 244), 610: (238, 245), 611: (236, 246), 612: (234, 247), 613: (232, 248), 614: (230, 249), 615: (228, 250), 616: (226, 251), 617: (224, 252), 618: (222, 253), 619: (220, 254), 620: (218, 255), 621: (216, 256), 622: (214, 257), 623: (212, 258), 624: (210, 259), 625: (208, 260), 626: (206, 261), 627: (204, 262), 628: (202, 263), 629: (200, 264), 630: (198, 265), 631: (196, 266), 632: (194, 267), 633: (192, 268), 634: (190, 269), 635: (188, 270), 636: (186, 271), 637: (184, 272), 638: (182, 273), 639: (180, 274), 640: (178, 275), 641: (176, 276), 642: (174, 277), 643: (172, 278), 644: (170, 279), 645: (168, 280), 646: (166, 281), 647: (164, 282), 648: (162, 283), 649: (160, 284), 650: (158, 285), 651: (156, 286), 652: (154, 287), 653: (152, 288), 654: (150, 289), 655: (148, 290), 656: (146, 291), 657: (144, 292), 658: (142, 293), 659: (140, 294), 660: (138, 295), 661: (136, 296), 662: (134, 297), 663: (132, 298), 664: (130, 299), 665: (128, 300), 666: (126, 301), 667: (124, 302), 668: (122, 303), 669: (120, 304), 670: (118, 305), 671: (116, 306), 672: (114, 307), 673: (112, 308), 674: (110, 309), 675: (108, 310), 676: (106, 311), 677: (104, 312), 678: (102, 313), 679: (100, 314), 680: (98, 315), 681: (96, 316), 682: (94, 317), 683: (92, 318), 684: (90, 319), 685: (88, 320), 686: (86, 321), 687: (84, 322), 688: (82, 323), 689: (80, 324), 690: (78, 325), 691: (76, 326), 692: (74, 327), 693: (72, 328), 694: (70, 329), 695: (68, 330), 696: (66, 331), 697: (64, 332), 698: (62, 333), 699: (60, 334), 700: (58, 335), 701: (56, 336), 702: (54, 337), 703: (52, 338), 704: (50, 339), 705: (48, 340), 706: (46, 341), 707: (44, 342), 708: (42, 343), 709: (40, 344), 710: (38, 345), 711: (36, 346), 712: (34, 347), 713: (32, 348), 714: (30, 349), 715: (28, 350), 716: (26, 351), 717: (24, 352), 718: (22, 353), 719: (20, 354), 720: (18, 355), 721: (16, 356), 722: (14, 357), 723: (12, 358), 724: (10, 359), 725: (8, 360), 726: (6, 361), 727: (4, 362), 728: (2, 363)}
rarr = {0: (728, 365), 1: (726, 366), 2: (724, 367), 3: (722, 368), 4: (720, 369), 5: (718, 370), 6: (716, 371), 7: (714, 372), 8: (712, 373), 9: (710, 374), 10: (708, 375), 11: (706, 376), 12: (704, 377), 13: (702, 378), 14: (700, 379), 15: (698, 380), 16: (696, 381), 17: (694, 382), 18: (692, 383), 19: (690, 384), 20: (688, 385), 21: (686, 386), 22: (684, 387), 23: (682, 388), 24: (680, 389), 25: (678, 390), 26: (676, 391), 27: (674, 392), 28: (672, 393), 29: (670, 394), 30: (668, 395), 31: (666, 396), 32: (664, 397), 33: (662, 398), 34: (660, 399), 35: (658, 400), 36: (656, 401), 37: (654, 402), 38: (652, 403), 39: (650, 404), 40: (648, 405), 41: (646, 406), 42: (644, 407), 43: (642, 408), 44: (640, 409), 45: (638, 410), 46: (636, 411), 47: (634, 412), 48: (632, 413), 49: (630, 414), 50: (628, 415), 51: (626, 416), 52: (624, 417), 53: (622, 418), 54: (620, 419), 55: (618, 420), 56: (616, 421), 57: (614, 422), 58: (612, 423), 59: (610, 424), 60: (608, 425), 61: (606, 426), 62: (604, 427), 63: (602, 428), 64: (600, 429), 65: (598, 430), 66: (596, 431), 67: (594, 432), 68: (592, 433), 69: (590, 434), 70: (588, 435), 71: (586, 436), 72: (584, 437), 73: (582, 438), 74: (580, 439), 75: (578, 440), 76: (576, 441), 77: (574, 442), 78: (572, 443), 79: (570, 444), 80: (568, 445), 81: (566, 446), 82: (564, 447), 83: (562, 448), 84: (560, 449), 85: (558, 450), 86: (556, 451), 87: (554, 452), 88: (552, 453), 89: (550, 454), 90: (548, 455), 91: (546, 456), 92: (544, 457), 93: (542, 458), 94: (540, 459), 95: (538, 460), 96: (536, 461), 97: (534, 462), 98: (532, 463), 99: (530, 464), 100: (528, 465), 101: (526, 466), 102: (524, 467), 103: (522, 468), 104: (520, 469), 105: (518, 470), 106: (516, 471), 107: (514, 472), 108: (512, 473), 109: (510, 474), 110: (508, 475), 111: (506, 476), 112: (504, 477), 113: (502, 478), 114: (500, 479), 115: (498, 480), 116: (496, 481), 117: (494, 482), 118: (492, 483), 119: (490, 484), 120: (488, 485), 121: (486, 486), 122: (484, 487), 123: (482, 488), 124: (480, 489), 125: (478, 490), 126: (476, 491), 127: (474, 492), 128: (472, 493), 129: (470, 494), 130: (468, 495), 131: (466, 496), 132: (464, 497), 133: (462, 498), 134: (460, 499), 135: (458, 500), 136: (456, 501), 137: (454, 502), 138: (452, 503), 139: (450, 504), 140: (448, 505), 141: (446, 506), 142: (444, 507), 143: (442, 508), 144: (440, 509), 145: (438, 510), 146: (436, 511), 147: (434, 512), 148: (432, 513), 149: (430, 514), 150: (428, 515), 151: (426, 516), 152: (424, 517), 153: (422, 518), 154: (420, 519), 155: (418, 520), 156: (416, 521), 157: (414, 522), 158: (412, 523), 159: (410, 524), 160: (408, 525), 161: (406, 526), 162: (404, 527), 163: (402, 528), 164: (400, 529), 165: (398, 530), 166: (396, 531), 167: (394, 532), 168: (392, 533), 169: (390, 534), 170: (388, 535), 171: (386, 536), 172: (384, 537), 173: (382, 538), 174: (380, 539), 175: (378, 540), 176: (376, 541), 177: (374, 542), 178: (372, 543), 179: (370, 544), 180: (368, 545), 181: (366, 546), 182: (364, 547), 183: (362, 548), 184: (360, 549), 185: (358, 550), 186: (356, 551), 187: (354, 552), 188: (352, 553), 189: (350, 554), 190: (348, 555), 191: (346, 556), 192: (344, 557), 193: (342, 558), 194: (340, 559), 195: (338, 560), 196: (336, 561), 197: (334, 562), 198: (332, 563), 199: (330, 564), 200: (328, 565), 201: (326, 566), 202: (324, 567), 203: (322, 568), 204: (320, 569), 205: (318, 570), 206: (316, 571), 207: (314, 572), 208: (312, 573), 209: (310, 574), 210: (308, 575), 211: (306, 576), 212: (304, 577), 213: (302, 578), 214: (300, 579), 215: (298, 580), 216: (296, 581), 217: (294, 582), 218: (292, 583), 219: (290, 584), 220: (288, 585), 221: (286, 586), 222: (284, 587), 223: (282, 588), 224: (280, 589), 225: (278, 590), 226: (276, 591), 227: (274, 592), 228: (272, 593), 229: (270, 594), 230: (268, 595), 231: (266, 596), 232: (264, 597), 233: (262, 598), 234: (260, 599), 235: (258, 600), 236: (256, 601), 237: (254, 602), 238: (252, 603), 239: (250, 604), 240: (248, 605), 241: (246, 606), 242: (244, 607), 243: (242, 608), 244: (240, 609), 245: (238, 610), 246: (236, 611), 247: (234, 612), 248: (232, 613), 249: (230, 614), 250: (228, 615), 251: (226, 616), 252: (224, 617), 253: (222, 618), 254: (220, 619), 255: (218, 620), 256: (216, 621), 257: (214, 622), 258: (212, 623), 259: (210, 624), 260: (208, 625), 261: (206, 626), 262: (204, 627), 263: (202, 628), 264: (200, 629), 265: (198, 630), 266: (196, 631), 267: (194, 632), 268: (192, 633), 269: (190, 634), 270: (188, 635), 271: (186, 636), 272: (184, 637), 273: (182, 638), 274: (180, 639), 275: (178, 640), 276: (176, 641), 277: (174, 642), 278: (172, 643), 279: (170, 644), 280: (168, 645), 281: (166, 646), 282: (164, 647), 283: (162, 648), 284: (160, 649), 285: (158, 650), 286: (156, 651), 287: (154, 652), 288: (152, 653), 289: (150, 654), 290: (148, 655), 291: (146, 656), 292: (144, 657), 293: (142, 658), 294: (140, 659), 295: (138, 660), 296: (136, 661), 297: (134, 662), 298: (132, 663), 299: (130, 664), 300: (128, 665), 301: (126, 666), 302: (124, 667), 303: (122, 668), 304: (120, 669), 305: (118, 670), 306: (116, 671), 307: (114, 672), 308: (112, 673), 309: (110, 674), 310: (108, 675), 311: (106, 676), 312: (104, 677), 313: (102, 678), 314: (100, 679), 315: (98, 680), 316: (96, 681), 317: (94, 682), 318: (92, 683), 319: (90, 684), 320: (88, 685), 321: (86, 686), 322: (84, 687), 323: (82, 688), 324: (80, 689), 325: (78, 690), 326: (76, 691), 327: (74, 692), 328: (72, 693), 329: (70, 694), 330: (68, 695), 331: (66, 696), 332: (64, 697), 333: (62, 698), 334: (60, 699), 335: (58, 700), 336: (56, 701), 337: (54, 702), 338: (52, 703), 339: (50, 704), 340: (48, 705), 341: (46, 706), 342: (44, 707), 343: (42, 708), 344: (40, 709), 345: (38, 710), 346: (36, 711), 347: (34, 712), 348: (32, 713), 349: (30, 714), 350: (28, 715), 351: (26, 716), 352: (24, 717), 353: (22, 718), 354: (20, 719), 355: (18, 720), 356: (16, 721), 357: (14, 722), 358: (12, 723), 359: (10, 724), 360: (8, 725), 361: (6, 726), 362: (4, 727), 363: (2, 728), 364: (0, 0), 365: (727, 1), 366: (725, 2), 367: (723, 3), 368: (721, 4), 369: (719, 5), 370: (717, 6), 371: (715, 7), 372: (713, 8), 373: (711, 9), 374: (709, 10), 375: (707, 11), 376: (705, 12), 377: (703, 13), 378: (701, 14), 379: (699, 15), 380: (697, 16), 381: (695, 17), 382: (693, 18), 383: (691, 19), 384: (689, 20), 385: (687, 21), 386: (685, 22), 387: (683, 23), 388: (681, 24), 389: (679, 25), 390: (677, 26), 391: (675, 27), 392: (673, 28), 393: (671, 29), 394: (669, 30), 395: (667, 31), 396: (665, 32), 397: (663, 33), 398: (661, 34), 399: (659, 35), 400: (657, 36), 401: (655, 37), 402: (653, 38), 403: (651, 39), 404: (649, 40), 405: (647, 41), 406: (645, 42), 407: (643, 43), 408: (641, 44), 409: (639, 45), 410: (637, 46), 411: (635, 47), 412: (633, 48), 413: (631, 49), 414: (629, 50), 415: (627, 51), 416: (625, 52), 417: (623, 53), 418: (621, 54), 419: (619, 55), 420: (617, 56), 421: (615, 57), 422: (613, 58), 423: (611, 59), 424: (609, 60), 425: (607, 61), 426: (605, 62), 427: (603, 63), 428: (601, 64), 429: (599, 65), 430: (597, 66), 431: (595, 67), 432: (593, 68), 433: (591, 69), 434: (589, 70), 435: (587, 71), 436: (585, 72), 437: (583, 73), 438: (581, 74), 439: (579, 75), 440: (577, 76), 441: (575, 77), 442: (573, 78), 443: (571, 79), 444: (569, 80), 445: (567, 81), 446: (565, 82), 447: (563, 83), 448: (561, 84), 449: (559, 85), 450: (557, 86), 451: (555, 87), 452: (553, 88), 453: (551, 89), 454: (549, 90), 455: (547, 91), 456: (545, 92), 457: (543, 93), 458: (541, 94), 459: (539, 95), 460: (537, 96), 461: (535, 97), 462: (533, 98), 463: (531, 99), 464: (529, 100), 465: (527, 101), 466: (525, 102), 467: (523, 103), 468: (521, 104), 469: (519, 105), 470: (517, 106), 471: (515, 107), 472: (513, 108), 473: (511, 109), 474: (509, 110), 475: (507, 111), 476: (505, 112), 477: (503, 113), 478: (501, 114), 479: (499, 115), 480: (497, 116), 481: (495, 117), 482: (493, 118), 483: (491, 119), 484: (489, 120), 485: (487, 121), 486: (485, 122), 487: (483, 123), 488: (481, 124), 489: (479, 125), 490: (477, 126), 491: (475, 127), 492: (473, 128), 493: (471, 129), 494: (469, 130), 495: (467, 131), 496: (465, 132), 497: (463, 133), 498: (461, 134), 499: (459, 135), 500: (457, 136), 501: (455, 137), 502: (453, 138), 503: (451, 139), 504: (449, 140), 505: (447, 141), 506: (445, 142), 507: (443, 143), 508: (441, 144), 509: (439, 145), 510: (437, 146), 511: (435, 147), 512: (433, 148), 513: (431, 149), 514: (429, 150), 515: (427, 151), 516: (425, 152), 517: (423, 153), 518: (421, 154), 519: (419, 155), 520: (417, 156), 521: (415, 157), 522: (413, 158), 523: (411, 159), 524: (409, 160), 525: (407, 161), 526: (405, 162), 527: (403, 163), 528: (401, 164), 529: (399, 165), 530: (397, 166), 531: (395, 167), 532: (393, 168), 533: (391, 169), 534: (389, 170), 535: (387, 171), 536: (385, 172), 537: (383, 173), 538: (381, 174), 539: (379, 175), 540: (377, 176), 541: (375, 177), 542: (373, 178), 543: (371, 179), 544: (369, 180), 545: (367, 181), 546: (365, 182), 547: (363, 183), 548: (361, 184), 549: (359, 185), 550: (357, 186), 551: (355, 187), 552: (353, 188), 553: (351, 189), 554: (349, 190), 555: (347, 191), 556: (345, 192), 557: (343, 193), 558: (341, 194), 559: (339, 195), 560: (337, 196), 561: (335, 197), 562: (333, 198), 563: (331, 199), 564: (329, 200), 565: (327, 201), 566: (325, 202), 567: (323, 203), 568: (321, 204), 569: (319, 205), 570: (317, 206), 571: (315, 207), 572: (313, 208), 573: (311, 209), 574: (309, 210), 575: (307, 211), 576: (305, 212), 577: (303, 213), 578: (301, 214), 579: (299, 215), 580: (297, 216), 581: (295, 217), 582: (293, 218), 583: (291, 219), 584: (289, 220), 585: (287, 221), 586: (285, 222), 587: (283, 223), 588: (281, 224), 589: (279, 225), 590: (277, 226), 591: (275, 227), 592: (273, 228), 593: (271, 229), 594: (269, 230), 595: (267, 231), 596: (265, 232), 597: (263, 233), 598: (261, 234), 599: (259, 235), 600: (257, 236), 601: (255, 237), 602: (253, 238), 603: (251, 239), 604: (249, 240), 605: (247, 241), 606: (245, 242), 607: (243, 243), 608: (241, 244), 609: (239, 245), 610: (237, 246), 611: (235, 247), 612: (233, 248), 613: (231, 249), 614: (229, 250), 615: (227, 251), 616: (225, 252), 617: (223, 253), 618: (221, 254), 619: (219, 255), 620: (217, 256), 621: (215, 257), 622: (213, 258), 623: (211, 259), 624: (209, 260), 625: (207, 261), 626: (205, 262), 627: (203, 263), 628: (201, 264), 629: (199, 265), 630: (197, 266), 631: (195, 267), 632: (193, 268), 633: (191, 269), 634: (189, 270), 635: (187, 271), 636: (185, 272), 637: (183, 273), 638: (181, 274), 639: (179, 275), 640: (177, 276), 641: (175, 277), 642: (173, 278), 643: (171, 279), 644: (169, 280), 645: (167, 281), 646: (165, 282), 647: (163, 283), 648: (161, 284), 649: (159, 285), 650: (157, 286), 651: (155, 287), 652: (153, 288), 653: (151, 289), 654: (149, 290), 655: (147, 291), 656: (145, 292), 657: (143, 293), 658: (141, 294), 659: (139, 295), 660: (137, 296), 661: (135, 297), 662: (133, 298), 663: (131, 299), 664: (129, 300), 665: (127, 301), 666: (125, 302), 667: (123, 303), 668: (121, 304), 669: (119, 305), 670: (117, 306), 671: (115, 307), 672: (113, 308), 673: (111, 309), 674: (109, 310), 675: (107, 311), 676: (105, 312), 677: (103, 313), 678: (101, 314), 679: (99, 315), 680: (97, 316), 681: (95, 317), 682: (93, 318), 683: (91, 319), 684: (89, 320), 685: (87, 321), 686: (85, 322), 687: (83, 323), 688: (81, 324), 689: (79, 325), 690: (77, 326), 691: (75, 327), 692: (73, 328), 693: (71, 329), 694: (69, 330), 695: (67, 331), 696: (65, 332), 697: (63, 333), 698: (61, 334), 699: (59, 335), 700: (57, 336), 701: (55, 337), 702: (53, 338), 703: (51, 339), 704: (49, 340), 705: (47, 341), 706: (45, 342), 707: (43, 343), 708: (41, 344), 709: (39, 345), 710: (37, 346), 711: (35, 347), 712: (33, 348), 713: (31, 349), 714: (29, 350), 715: (27, 351), 716: (25, 352), 717: (23, 353), 718: (21, 354), 719: (19, 355), 720: (17, 356), 721: (15, 357), 722: (13, 358), 723: (11, 359), 724: (9, 360), 725: (7, 361), 726: (5, 362), 727: (3, 363), 728: (1, 364)}


TOTALROUNDS = 27

def crypt(pi, i):
  truth_table = [1, 0, -1, 1, -1, 0, -1, 1, 0]
  return truth_table[pi + (3 * i) + 4]


def diffleftpath(loc, depth):
	x = loc
	pipath = []
	for i in xrange(depth):
		x = index[x][0]
		pipath.append(x)
	return pipath

def follow(arr):
	newarr = []
	for x in arr:
		newarr.extend(index[x])
	return newarr


def calceq(depth, a=[364], b=[365]):
	for i in xrange(depth):
		a = follow(a)
		b = follow(b)
	results = []
	results.extend(a)
	results.extend(b)
	return results

def getparents(depth, x):
	if depth == 0:
		return [x]
	if depth == 1:
		return [index[x][0], index[x][1]]
	else:
		return	calceq(depth-1, [index[x][0]], [index[x][1]])


def randommsg(length): return [randint(0,2)-1 for i in xrange(length)]


def randomFromTemplate(template):
	randMB = randommsg(243)
	for i in xrange(243):
		if template[i] != 'x':
			randMB[i] = template[i]
	return randMB


def setFancy(eqs1, eqs2):
	statelst = []
	for i in eqs1:
		statelst.extend(i)
	for i in eqs2:
		statelst.extend(i)
	stateset = set([i for i in statelst])
	return stateset


def runeq(eqs, state):
	neweq = []
	for i in xrange(0, len(eqs), 2):
		var1 = eqs[i]
		var2 = eqs[i+1]
		neweq.append(crypt(var1, var2))
	return neweq


def resolveeq(eqs, state):
	reducedeqs = []
	for i in xrange(0, len(eqs), 2):
		pind = eqs[i]
		ind = eqs[i+1]
		reducedeqs.append(crypt(state[pind], state[ind]))
	return reducedeqs

def solveeq(eqs, state):
	vareqs = resolveeq(eqs, state)
	while len(vareqs) > 1:
		vareqs = runeq(vareqs, state)
	return vareqs[0]

def trytes_to_trits(trytes):
	trits = []

	for tryte in trytes:
		if tryte == "9":
			trits.extends([0,0,0])


def fromTritStr(tritstr):
	tritarr = []

	for i in tritstr:
		tritarr.append(int(i)-1)

	return tritarr

def inc(trit):
	if trit == -1:
		return 0
	elif trit == 0:
		return 1
	elif trit == 1: 
		return -1

def inc2(trit1, trit2):
	if trit1 == 1:
		return inc(trit1), inc(trit2)
	else:
		return inc(trit1), trit2


def incs(trits):
	newtrits = []
	carry = True
	for i in xrange(len(trits)):
		if carry == True:
			newtrits.append(inc(trits[i]))
		else:
			newtrits.append(trits[i])
		if trits[i] != 1:
			carry = False

	return newtrits

def inTag(lst):
	lst2 = []
	for i in lst:
		if 81 <= i and i < 81*2:
			lst2.append(i)
	return lst2

def runst(msg, STATE, rounds=27):
	assert(len(msg) == 243)

	h = Curl()
	h._state = STATE[:]
	h._state [0:243] = msg[:]
	for r in xrange(rounds):
		h._transform(1)
	return h._state



def valueTemplate26(startingState, mb1, mb2, mb3, pos):
	depth = 9

	savedmb3 = mb3[:]

	# Create Eqs
	x=pos
	pathleft = []
	pathright = []
	lefteqs = []
	righteqs = []
	for i in xrange(depth):
		lpair = larr[x][1]

		lparents = getparents(i, lpair)
		lefteqs.append(lparents)

		x = larr[x][0]
		rpair = index[x-1%729][0]

		rparents = getparents(i, rpair)
		righteqs.append(rparents)

		pathleft.append(x)

	mb1rand = mb1[:]


	solved = False
	failtries = 0
	while not solved:
		failtries += 1
		
		mb1rand[81:2*81] = randommsg(81)
		
		# MB2 	
		state = runst(mb1rand, startingState)
		state = runst(mb2, state)

		if not (state[lefteqs[0][0]] == 1 and state[righteqs[0][0]] == 1):
			continue
		if not  ((state[573] == -1 and mb3[208] == -1) 
			or (state[573] == -1 and mb3[208] == 0)
			or (state[573] == 0  and mb3[208] == 1)):
			continue
		if not  ((mb3[208] == -1 and state[572] == -1) 
			or (mb3[208] == -1 and state[572] == 0)
			or (mb3[208] == 0  and state[572] == 1)):
			continue
		state [0:243] = mb3[:]

		solved108 = False
		for w in xrange(3):
			if ((solveeq(lefteqs[2], state) == 1) and (solveeq(righteqs[2], state) == 1)):
				solved108 = True
				break
			else:
				state[117] = inc(state[117])
		if solved108 == False:
			continue
		if not (solveeq(lefteqs[3], state) == 1):
			continue
		if not (solveeq(righteqs[3], state) == 1):
			continue
		print "solved3"

		solved4 = False
		for w in xrange(9):
			if (solveeq(lefteqs[4], state) == 1) and (solveeq(righteqs[4], state) == 1):
				solved4 = True
				break
			else:
				trit1, trit2 = inc2(state[140], state[94])
				state[140] = trit1
				state[94] = trit2
		if solved4 == False:
			continue
		print "solved4"

		solved5 = False
		for w in xrange(3**3):
			if (solveeq(lefteqs[5], state) == 1) and (solveeq(righteqs[5], state) == 1):
				solved5 = True
				break
			else:
				trits = incs([state[83], state[106], state[128]])
				state[83] = trits[0]
				state[106] = trits[1]
				state[128] = trits[2]
		if solved5 == False:
			continue
		print "solved5"

		solved6 = False
		for w in xrange(3**6):
			if (solveeq(lefteqs[6], state) == 1) and (solveeq(righteqs[6], state) == 1):
				solved6 = True
				break
			else:
				trits = incs([state[123], state[100], state[145], state[111], state[88], state[157]])
				state[123] = trits[0]
				state[100] = trits[1]
				state[145] = trits[2]
				state[111] = trits[3]
				state[88] = trits[4]
				state[157] = trits[5] 
		if solved6 == False:
			continue
		print "solved6"

		solved7 = False
		for w in xrange(3**7):
			if (solveeq(lefteqs[7], state) == 1) and (solveeq(righteqs[7], state) == 1):
				solved7 = True
				break
			else:
				trits = incs([state[91], state[97], state[86], state[114], state[160], state[137], state[103]])

				state[91] = trits[0]
				state[97] = trits[1]
				state[86] = trits[2]
				state[114] = trits[3]
				state[160] = trits[4]
				state[137]= trits[5]
				state[103]= trits[6]
		if solved7 == False:
			continue
		print "solved7"


		solved8 = False
		for w in xrange(3**5):
			if (solveeq(lefteqs[8], state) == 1) and (solveeq(righteqs[8], state) == 1):
				solved8 = True
				break
			else:
				trits = incs([state[84], state[87], state[93], state[121], state[144]])

				state[84] = trits[0]
				state[87] = trits[1]
				state[93] = trits[2]
				state[121] = trits[3]
				state[141] = trits[4]
		if solved8 == False:
			continue

		solved = True
		for i in xrange(1,depth):
			if not (solveeq(lefteqs[i], state) == 1):
				solved = False
				print "L", i, lefteqs[i], solveeq(lefteqs[i], state), [state[j] for j in lefteqs[i]]
				break

			if not (solveeq(righteqs[i], state) == 1):
				solved = False
				print "R", i, righteqs[i], solveeq(righteqs[i], state), [state[j] for j in righteqs[i]]
				break

		if solved == True:
			template = state[0:243]
			ignoreSet = []
			for ll in xrange(0, depth):
				ignoreSet = ignoreSet + lefteqs[ll]+righteqs[ll]
			for i in xrange(81, 2*81):
				if i in set(ignoreSet):
					template[i] = state[i]
				else:
					template[i] = 2
			template[pos] = 3
			return mb1rand, mb2, template


def gentemplate(startingState, mb1, mb2, mb3):
  
  savedstate = startingState[:]

  assert(len(mb1) == 243); assert(len(mb2) == 243); assert(len(mb3) == 243)

  pos = 26
  (randmb1, mb2, mb3template) = valueTemplate26(startingState, mb1, mb2, mb3, pos)

  print "tx_secondhalf = ", randmb1
  print "tx_template = ", mb2+mb3template

  return randmb1, mb2, mb3template, startingState

def comparestates(s1, s2):
	for i in xrange(len(s1)):
		if s1[i] != s2[i]:
			print i, s1[i], s2[i]


def testoutput(randmb1, mb2, mb3template, startingState, rounds):
  diffmb3 = [ randommsg(1)[0] if i == 2 else i for i in mb3template]

  state = runst(randmb1, startingState[:])
  savedState = runst(mb2, state)
  
  diff1 = diffmb3[:]
  diff1[26] = 0
  print "diff1", diff1
  print savedState, rounds
  state1 = runst(diff1, savedState[:], rounds)

  diff2 = diffmb3[:]
  diff2[26] = 1
  state2 = runst(diff2, savedState[:], rounds)


  diffs = 0
  for i in xrange(len(state1)):
    if not state1[i] == state2[i]:
      diffs+=1
  return diffs

def argparse(argv):
  arg_dict={}
  switches={'state':list,'1mb':list,'2mb':list, '3mb':list}
  singles=''.join([x[0]+':' for x in switches])
  long_form=[x+'=' for x in switches]
  d={x[0]+':':'--'+x for x in switches}
  try:
    opts, args = getopt.getopt(argv, singles, long_form)
  except getopt.GetoptError:
    print "bad arg"                       
    sys.exit(2)       
  
  for opt, arg in opts:        
    if opt[1]+':' in d: o=d[opt[1]+':'][2:]
    elif opt in d.values(): o=opt[2:]
    else: o =''
    if o and arg:
      arg_dict[o]=ast.literal_eval(arg)


    if not o or not isinstance(arg_dict[o], switches[o]):    
      print opt, arg, " Error: bad arg"
      sys.exit(2)

  startingstate = arg_dict['state']

  mb1 = arg_dict['1mb']
  mb2 = arg_dict['2mb']
  mb3 = arg_dict['3mb']

  assert(len(mb1) == 243); assert(len(mb2) == 243); assert(len(mb3) == 243)

  return startingstate, mb1, mb2, mb3


if __name__ == "__main__":
  # pypy trit26.py --state=[-1,1,0,1,1,0,0,0,-1,-1,0,0,1,0,1,-1,0,0,0,-1,0,-1,0,0,1,-1,1,1,1,1,0,-1,0,0,0,1,0,0,0,1,-1,0,0,0,1,1,1,1,0,-1,1,1,0,0,0,-1,1,0,-1,1,1,-1,0,0,1,1,1,0,0,-1,0,-1,-1,1,0,0,-1,1,0,1,-1,-1,1,1,1,-1,0,1,1,0,0,0,-1,1,0,1,-1,-1,0,-1,1,1,0,0,0,-1,0,-1,-1,0,0,0,1,0,0,0,0,-1,1,1,0,-1,1,1,0,0,-1,0,0,0,1,1,0,0,-1,1,0,-1,-1,-1,-1,1,1,0,1,-1,-1,-1,1,-1,1,-1,0,1,0,0,0,-1,1,0,-1,1,-1,-1,1,-1,0,1,1,0,-1,0,1,1,0,1,-1,-1,-1,1,-1,-1,1,0,1,-1,0,1,0,-1,-1,-1,-1,1,1,1,-1,0,0,0,-1,1,1,-1,-1,1,-1,0,1,0,-1,0,0,1,0,1,0,1,1,-1,1,-1,1,0,-1,-1,-1,-1,-1,1,-1,0,0,-1,1,1,-1,0,1,-1,0,0,0,-1,-1,-1,0,1,0,0,0,1,0,0,1,1,0,0,1,1,-1,0,0,0,0,1,-1,1,-1,0,-1,1,-1,-1,1,-1,1,0,-1,-1,-1,0,-1,1,-1,-1,1,-1,0,0,1,-1,0,-1,1,1,-1,-1,-1,-1,1,1,0,1,0,0,1,0,-1,-1,-1,-1,0,-1,-1,1,1,1,1,0,-1,0,1,1,-1,1,-1,0,0,-1,-1,0,1,1,1,1,0,1,0,0,0,-1,-1,1,-1,1,1,-1,0,1,1,0,-1,-1,1,-1,1,1,1,1,-1,-1,1,-1,0,1,-1,0,0,0,-1,0,1,1,1,0,1,-1,1,0,1,-1,0,0,-1,-1,-1,1,0,0,1,1,-1,-1,1,0,1,0,1,-1,0,-1,-1,-1,0,0,1,0,-1,-1,-1,-1,1,-1,0,1,0,-1,-1,0,-1,-1,-1,1,0,0,1,0,-1,-1,1,1,1,0,-1,-1,-1,1,0,-1,-1,-1,1,1,-1,1,1,-1,-1,1,0,-1,1,0,-1,0,0,-1,0,1,1,1,0,-1,1,1,-1,-1,1,-1,0,-1,1,0,-1,-1,0,-1,0,0,1,1,0,0,0,-1,0,-1,1,-1,-1,1,0,-1,-1,0,-1,1,1,-1,-1,1,-1,0,0,0,1,-1,0,-1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,-1,1,1,1,1,1,1,0,-1,1,1,-1,-1,1,0,-1,-1,1,0,1,-1,1,-1,1,0,0,0,1,0,-1,-1,-1,1,1,-1,1,0,-1,1,-1,0,0,1,-1,1,-1,-1,0,1,0,0,-1,1,0,0,-1,1,1,-1,1,-1,0,1,1,1,1,-1,-1,-1,-1,-1,0,-1,0,-1,1,1,1,1,1,1,0,1,1,-1,0,0,1,0,0,1,1,1,-1,-1,1,-1,-1,0,0,-1,-1,-1,0,-1,1,-1,-1,-1,0,0,1,0,1,0,0,-1,0,0,1,0,1,1,0,-1,1,-1,-1,-1,-1,-1,0,1,-1,1,0,-1,-1,1,-1,0,-1,-1,0,1,1,1,-1,0,-1,-1,-1,0,1,1,-1,-1,-1,-1,0,-1,1,0,0,-1,0,0,0,-1,-1,-1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,1,-1,0,-1,1,0,0,-1,-1,-1,-1,0,0,-1,-1,1,1,0] --1mb=[0,0,1,0,1,1,0,-1,-1,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,-1,1,1,1,0,-1,1,0,0,-1,-1,-1,0,0,1,1,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] --2mb=[1,1,0,-1,1,1,0,-1,0,0,1,-1,0,-1,0,-1,0,-1,0,1,0,-1,-1,1,0,1,1,1,-1,1,1,0,0,1,0,0,-1,1,0,0,-1,1,0,-1,1,-1,1,-1,0,1,0,-1,-1,-1,1,-1,-1,-1,0,1,-1,1,-1,-1,1,-1,1,-1,1,-1,0,0,1,0,1,1,0,-1,0,1,-1,1,0,0,-1,1,-1,0,-1,1,1,-1,-1,0,1,-1,0,1,-1,-1,0,0,0,1,1,1,1,-1,0,0,1,0,0,1,0,0,-1,-1,0,1,-1,0,-1,1,-1,0,1,-1,1,1,-1,-1,0,-1,1,-1,1,1,0,0,-1,0,1,1,1,0,0,-1,1,-1,1,-1,0,-1,0,0,-1,0,0,0,1,-1,1,0,-1,1,1,0,0,1,-1,0,1,1,1,1,-1,-1,-1,0,0,1,-1,0,-1,0,0,-1,1,1,-1,1,-1,-1,-1,1,0,0,1,-1,0,-1,-1,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,-1,0,-1,1,0,-1,-1,-1,1,-1,-1,-1,1,0,-1,1,-1,-1,0,0,0,1,1,0] --3mb=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,-1,1,1,1,0,-1,1,0,0,-1,-1,-1,0,0,1,1,0,0,0,0,0,0,0,1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  startingstate, mb1, mb2, mb3 = argparse(sys.argv[1:])
  randmb1, mb2, mb3template, startingState = gentemplate(startingstate, mb1, mb2, mb3)



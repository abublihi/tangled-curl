package collide

import "testing"

func TestCollideQuick(t *testing.T) {
	state := []int8{0, 1, 0, -1, -1, -1,
		1, -1, 0, 1, 0, -1, -1, -1, -1, 0, -1, -1, 1, -1, 1, 0, 0, 0, 1,
		1, 0, -1, 1, 1, 0, 1, 0, -1, 0, -1, -1, 0, 0, 0, 0, 1, -1, -1, 1,
		-1, -1, 0, -1, 1, -1, 0, 0, 1, 0, -1, -1, 0, -1, 0, 0, 1, 1, 1, 1,
		0, -1, -1, 0, -1, 1, 0, 1, 1, 0, 0, 0, 1, 0, -1, -1, 1, 1, -1, -1,
		1, 1, 0, 1, -1, -1, 1, 1, 0, -1, 1, 1, -1, -1, -1, 1, 0, -1, 0, 0,
		1, -1, 1, 0, 1, -1, 0, 0, 1, 0, 1, 1, -1, -1, 0, 0, 1, 0, 0, -1,
		1, -1, 0, -1, -1, -1, 0, 1, -1, 1, -1, 1, 0, 1, 0, 1, 1, 0, -1, 1,
		1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 1, -1, 0, -1, 0, -1, 0,
		-1, 0, -1, 1, 1, -1, -1, 0, 0, 0, -1, -1, 1, -1, 1, 0, 0, 0, -1,
		-1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 0, 0, 1, 1, -1, -1, 0, 1, 1,
		0, -1, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1,
		0, -1, 1, 0, 1, 1, 0, 1, 1, -1, 1, -1, 1, 0, 1, 1, 0, 0, -1, 0, 0,
		-1, 1, 1, 0, 1, 0, 0, -1, 0, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1,
		0, 1, 1, 1, 1, -1, -1, 0, 0, -1, 1, 1, 1, 0, 1, 1, 0, -1, 1, -1,
		0, 1, -1, -1, 0, 1, 0, -1, -1, 1, 0, -1, -1, 0, -1, -1, 1, 0, 0,
		1, 1, -1, 1, 0, 1, -1, 1, -1, 1, 0, -1, 1, 1, 0, 0, -1, -1, 1, 1,
		0, 1, 0, -1, -1, -1, 0, 0, 1, 0, 0, 1, -1, -1, -1, 0, -1, 0, 1, 1,
		0, -1, 1, 1, -1, -1, -1, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, -1, 1,
		1, 1, 0, -1, -1, 1, -1, 0, 0, 0, -1, 1, 1, 1, 0, 0, -1, 0, -1, 0,
		0, 1, -1, 1, 0, 1, 1, 1, 0, 1, 0, -1, -1, -1, 1, -1, -1, 1, -1, 1,
		0, 0, 1, -1, 1, 1, 1, 0, 1, -1, 0, 0, 0, -1, 1, -1, 1, 0, 0, -1,
		0, 0, -1, -1, -1, -1, 0, 0, 0, 1, 1, 0, 0, -1, 1, -1, 1, 1, -1, 1,
		-1, -1, 0, 1, 1, -1, 1, -1, 1, 1, 0, 1, 0, -1, 1, -1, 1, 0, -1,
		-1, 1, 0, -1, -1, 1, 1, 0, 1, 1, -1, 0, 1, 1, 0, 1, -1, 0, 1, 1,
		0, 0, 0, 1, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 1, 1, 1, 1, -1, 1,
		-1, 1, 0, -1, 0, 1, 0, 0, 1, 0, -1, 1, 0, -1, -1, 1, 1, -1, -1, 1,
		0, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 0, 1, 0, 1, -1, 1, -1, -1,
		1, 0, 0, 1, -1, -1, 0, 1, 1, 0, 0, 0, 0, 1, 0, -1, 1, 0, 1, -1, 1,
		1, 1, 0, 0, 1, 0, 1, -1, 1, -1, 1, 1, 1, 0, 0, 0, -1, 0, 1, 1, 0,
		0, -1, -1, 0, 1, 0, -1, -1, -1, -1, 0, 0, 0, 1, -1, 1, -1, 1, -1,
		0, -1, -1, 0, 1, 0, -1, -1, 0, 1, -1, 1, 1, 1, 0, -1, 0, 0, -1,
		-1, 1, 1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, -1, 0,
		1, -1, -1, 1, 1, 1, 1, 0, -1, -1, 0, -1, 1, 1, 0, 0, 1, 1, 1, -1,
		0, 0, 0, 1, -1, 0, 1, -1, 1, -1, 0, -1, -1, 0, 1, 1, 1, 0, -1, 0,
		1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 0, 1, 1, 1, -1, -1, 0, 1,
		-1, -1, 1, -1, 1, 0, 0, 1, 0, 1}

	template := []int8{1, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		-1, 1, -1, -1, -1, 1, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 1, 0, 1,
		1, -1, -1, 0, 0, 1, -1, 1, 0, 1, 0, 0, -1, -1, -1, 1, -1, 0, 1,
		-1, -1, -1, 1, -1, 0, 0, -1, 1, 0, 1, -1, 0, 1, 1, -1, -1, 1, -1,
		0, 1, 1, -1, -1, 0, 0, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 0,
		1, -1, -1, 0, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, 0, -1, -1, 1,
		-1, -1, 0, -1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0}

	msg0, msg1, _ := Collide(state, template, 4, 1, -1)
	if msg0 == nil || msg1 == nil {
		t.Fatalf("Should have found a collision")
	}
}

func TestCollideSlower(t *testing.T) {
	state := []int8{0, 1, 0, -1, -1, -1,
		1, -1, 0, 1, 0, -1, -1, -1, -1, 0, -1, -1, 1, -1, 1, 0, 0, 0, 1,
		1, 0, -1, 1, 1, 0, 1, 0, -1, 0, -1, -1, 0, 0, 0, 0, 1, -1, -1, 1,
		-1, -1, 0, -1, 1, -1, 0, 0, 1, 0, -1, -1, 0, -1, 0, 0, 1, 1, 1, 1,
		0, -1, -1, 0, -1, 1, 0, 1, 1, 0, 0, 0, 1, 0, -1, -1, 1, 1, -1, -1,
		1, 1, 0, 1, -1, -1, 1, 1, 0, -1, 1, 1, -1, -1, -1, 1, 0, -1, 0, 0,
		1, -1, 1, 0, 1, -1, 0, 0, 1, 0, 1, 1, -1, -1, 0, 0, 1, 0, 0, -1,
		1, -1, 0, -1, -1, -1, 0, 1, -1, 1, -1, 1, 0, 1, 0, 1, 1, 0, -1, 1,
		1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 1, -1, 0, -1, 0, -1, 0,
		-1, 0, -1, 1, 1, -1, -1, 0, 0, 0, -1, -1, 1, -1, 1, 0, 0, 0, -1,
		-1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 0, 0, 1, 1, -1, -1, 0, 1, 1,
		0, -1, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1,
		0, -1, 1, 0, 1, 1, 0, 1, 1, -1, 1, -1, 1, 0, 1, 1, 0, 0, -1, 0, 0,
		-1, 1, 1, 0, 1, 0, 0, -1, 0, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1,
		0, 1, 1, 1, 1, -1, -1, 0, 0, -1, 1, 1, 1, 0, 1, 1, 0, -1, 1, -1,
		0, 1, -1, -1, 0, 1, 0, -1, -1, 1, 0, -1, -1, 0, -1, -1, 1, 0, 0,
		1, 1, -1, 1, 0, 1, -1, 1, -1, 1, 0, -1, 1, 1, 0, 0, -1, -1, 1, 1,
		0, 1, 0, -1, -1, -1, 0, 0, 1, 0, 0, 1, -1, -1, -1, 0, -1, 0, 1, 1,
		0, -1, 1, 1, -1, -1, -1, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, -1, 1,
		1, 1, 0, -1, -1, 1, -1, 0, 0, 0, -1, 1, 1, 1, 0, 0, -1, 0, -1, 0,
		0, 1, -1, 1, 0, 1, 1, 1, 0, 1, 0, -1, -1, -1, 1, -1, -1, 1, -1, 1,
		0, 0, 1, -1, 1, 1, 1, 0, 1, -1, 0, 0, 0, -1, 1, -1, 1, 0, 0, -1,
		0, 0, -1, -1, -1, -1, 0, 0, 0, 1, 1, 0, 0, -1, 1, -1, 1, 1, -1, 1,
		-1, -1, 0, 1, 1, -1, 1, -1, 1, 1, 0, 1, 0, -1, 1, -1, 1, 0, -1,
		-1, 1, 0, -1, -1, 1, 1, 0, 1, 1, -1, 0, 1, 1, 0, 1, -1, 0, 1, 1,
		0, 0, 0, 1, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 1, 1, 1, 1, -1, 1,
		-1, 1, 0, -1, 0, 1, 0, 0, 1, 0, -1, 1, 0, -1, -1, 1, 1, -1, -1, 1,
		0, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 0, 1, 0, 1, -1, 1, -1, -1,
		1, 0, 0, 1, -1, -1, 0, 1, 1, 0, 0, 0, 0, 1, 0, -1, 1, 0, 1, -1, 1,
		1, 1, 0, 0, 1, 0, 1, -1, 1, -1, 1, 1, 1, 0, 0, 0, -1, 0, 1, 1, 0,
		0, -1, -1, 0, 1, 0, -1, -1, -1, -1, 0, 0, 0, 1, -1, 1, -1, 1, -1,
		0, -1, -1, 0, 1, 0, -1, -1, 0, 1, -1, 1, 1, 1, 0, -1, 0, 0, -1,
		-1, 1, 1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, -1, 0,
		1, -1, -1, 1, 1, 1, 1, 0, -1, -1, 0, -1, 1, 1, 0, 0, 1, 1, 1, -1,
		0, 0, 0, 1, -1, 0, 1, -1, 1, -1, 0, -1, -1, 0, 1, 1, 1, 0, -1, 0,
		1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 0, 1, 1, 1, -1, -1, 0, 1,
		-1, -1, 1, -1, 1, 0, 0, 1, 0, 1}

	template := []int8{1, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		2, 1, 2, -1, -1, 1, -1, 2, 2, -1, -1, -1, 0, 0, 0, 0, 1, 0, 1,
		1, -1, -1, 0, 0, 1, -1, 1, 0, 1, 0, 0, -1, -1, -1, 1, -1, 0, 1,
		-1, -1, -1, 1, -1, 0, 0, -1, 1, 0, 1, -1, 0, 1, 1, -1, -1, 1, -1,
		0, 1, 1, -1, -1, 0, 0, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 0,
		1, -1, -1, 0, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, 0, -1, -1, 1,
		-1, -1, 0, -1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0}

	msg0, msg1, _ := Collide(state, template, 4, 1, -1)
	if msg0 == nil || msg1 == nil {
		t.Fatalf("Should have found a collision")
	}
}
